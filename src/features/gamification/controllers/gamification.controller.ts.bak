import { Body, Controller, Get, Param, Post, UseGuards } from '@nestjs/common';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';
import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
import { AchievementService } from '../services/achievement.service';
import { EvaluationRewardService } from '../services/evaluation-reward.service';
import { GamificationService } from '../services/gamification.service';
import { MissionService } from '../services/mission.service';

@ApiTags('Gamificaci√≥n')
@Controller('api/v1/gamification')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth()
export class GamificationController {
    constructor(
        private readonly missionService: MissionService,
        private readonly achievementService: AchievementService,
        private readonly evaluationRewardService: EvaluationRewardService,
        private readonly gamificationService: GamificationService
    ) { }

    @Get('stats/:userId')
    async getUserStats(@Param('userId') userId: string) {
        return this.gamificationService.getUserStats(userId);
    }

    @Post('points/:userId')
    async updateUserPoints(
        @Param('userId') userId: string,
        @Body('points') points: number
    ) {
        return this.gamificationService.updateUserPoints(userId, points);
    }

    @Post('level/:userId')
    async updateUserLevel(
        @Param('userId') userId: string,
        @Body('level') level: number
    ) {
        return this.gamificationService.updateUserLevel(userId, level);
    }

    @Post('achievement/:userId/:achievementId')
    async awardAchievement(
        @Param('userId') userId: string,
        @Param('achievementId') achievementId: string
    ) {
        return this.gamificationService.awardAchievement(userId, achievementId);
    }

    @Post('reward/:userId/:rewardId')
    async awardReward(
        @Param('userId') userId: string,
        @Param('rewardId') rewardId: string
    ) {
        return this.gamificationService.awardReward(userId, rewardId);
    }
} 